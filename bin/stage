#!/bin/bash

# before you can stage you must have all build dependencies installed:
#  - npm install -g closurecompiler
#
#  - npm install colors ffi prompt ref socket.io-client commander express
#    lodash q socket.io stripcolorcodes jsonminify closurecompiler less
#    clean-css csslint
#
#  - apt-get install build-essential clang-3.4 make libsqlite3-dev libssl-dev
#    libboost1.54-all-dev

if [[ "$(uname)" == "Darwin" ]]; then
    DARWIN=1
    echo "[*] detected osx"
elif [[ "$(uname)" == "Linux" ]]; then
    LINUX=1
    echo "[*] detected linux"
elif [[ "$(expr substr $(uname -s) 1 6)" == "CYGWIN" ]]; then
    WINDOWS=1
    echo "[*] detected windows"
fi

VERSION=0.7.5
NODE_TARBALL=node-v0.10.24-linux-arm-armv6j-vfp-hard
#NODE_TARBALL=node-v0.10.26-linux-x86
#NODE_TARBALL=node-v0.10.26-darwin-x64
#NODE_TARBALL=node-v0.10.26-win32

echo "[*] deleting current staging area, if exists"
rm -rf build/stage/
rm build/*

echo "[*] replacing version in autom8.cpp with $VERSION"
pushd libautom8/src/ > /dev/null
perl -p -i".delme" -e "s/#define VERSION \".*\"/#define VERSION \"$VERSION\"/g" autom8.cpp
rm autom8.cpp.delme
popd > /dev/null

if [[ $WINDOWS != 1 ]]; then
    echo "[*] building libautom8"
    make
fi

echo "[*] copying files+libautom8 to staging area"
mkdir -p build/stage/bin
mkdir -p build/stage/lib/autom8
mkdir -p build/stage/share

# get the important files in place
cp -rfp autom8_node/client build/stage/lib/autom8
cp -rfp autom8_node/server build/stage/lib/autom8
cp -rfp autom8_node/shared build/stage/lib/autom8
mv build/stage/lib/autom8/shared/conf/ build/stage/share/autom8

if [[ $LINUX == 1 ]]; then
    cp libautom8.so build/stage/lib/ 2> /dev/null
    cp bin/init.rc build/stage/bin/autom8-init.rc
    cp bin/autom8 build/stage/bin/autom8
elif [[ $DARWIN == 1 ]]; then
    cp libautom8.dylib build/stage/lib/ 2> /dev/null
    cp bin/autom8 build/stage/bin/autom8
elif [[ $WINDOWS == 1 ]]; then
    cp release/*.dll build/stage/lib/ 2> /dev/null
fi

# we'll build these fresh
rm build/stage/lib/autom8/client/minifier.cache
rm build/stage/lib/autom8/server/minifier.cache

echo "[*] compiling server"
pushd ./build/stage/lib/autom8/server > /dev/null
node compile.js
popd > /dev/null

echo "[*] compiling client"
pushd ./build/stage/lib/autom8/client > /dev/null
node compile.js
popd > /dev/null

echo "[*] removing files that don't need to be distributed"
rm -rf build/stage/lib/autom8/client/frontend/js
rm -rf build/stage/lib/autom8/client/frontend/css
rm -rf build/stage/lib/autom8/client/frontend/templates/*.scripts
rm -rf build/stage/lib/autom8/client/frontend/templates/*.styles
rm -rf build/stage/lib/autom8/server/frontend/js
rm -rf build/stage/lib/autom8/server/frontend/css
rm -rf build/stage/lib/autom8/server/frontend/templates/*.scripts
rm -rf build/stage/lib/autom8/server/frontend/templates/*.styles
rm -rf build/stage/lib/autom8/shared/css
rm build/stage/lib/autom8/shared/templates/*.scripts
rm build/stage/lib/autom8/shared/templates/*.styles
rm -rf build/stage/lib/autom8/shared/js/3rdparty
rm -rf build/stage/lib/autom8/shared/js/frontend
rm ./build/stage/lib/autom8/server/compile.js
rm ./build/stage/lib/autom8/server/backend/raw.js
rm ./build/stage/lib/autom8/client/compile.js

echo "[*] compressing server-side js..."
for js in $(find ./build/stage -name *.js)
do
    echo "  $js"
    ccjs $js > $js.min
    mv $js.min $js
done

echo "[*] setting client versions to $VERSION"
pushd build/stage > /dev/null
perl -p -i".delme" -e "s/{{version}}/$VERSION/g" ./lib/autom8/server/frontend/index.html
perl -p -i".delme" -e "s/{{version}}/$VERSION/g" ./lib/autom8/client/frontend/index.html
find ./$STAGE/ -name "*.delme" | xargs -0 rm
popd > /dev/null

echo "[*] creating local node installation"
cp ./bin/$NODE_TARBALL.tar.gz ./build/stage/lib/autom8
pushd ./build/stage/lib/autom8 > /dev/null
tar xvfz $NODE_TARBALL.tar.gz
mv $NODE_TARBALL node
rm $NODE_TARBALL.tar.gz
popd > /dev/null

echo "[*] copying installation script, readme, and license"
cp bin/install build/
cp LICENSE build/
cp LICENSE.3rdparty build/
cp LICENSE.nodejs build/
cp LICENSE build/stage/share/autom8
cp LICENSE.3rdparty build/stage/share/autom8
cp LICENSE.nodejs build/stage/share/autom8

echo "[*] done"
