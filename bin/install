#!/bin/bash

NO_ARGS=0
PREFIX=
STAGE="autom8-stage-tmp"
USER="autom8"

if [[ "$(uname)" == "Darwin" ]]; then
    DARWIN=1
    echo "[*] detected osx"
elif [[ "$(uname)" == "Linux" ]]; then
    LINUX=1
    echo "[*] detected linux"
elif [[ "$(expr substr $(uname -s) 1 6)" == "CYGWIN" ]]; then
    WINDOWS=1
    echo "[*] detected windows"
fi

echo "[*] checking for nodejs and grunt"

NODE_VERSION=`node --version`
if [[ ! $NODE_VERSION =~ ^v4\.* ]]; then
  echo "Node version detected is invalid: '$NODE_VERSION'."
  echo "Please install version 4.0 or newer. Build aborted."
  exit
fi

NPM_VERSION=`npm --version`
if [[ ! $NPM_VERSION =~ ^2\.* ]]; then
  echo "npm version detected is invalid: '$NPM_VERSION'."
  echo "Please install version 2.0 or newer. Build aborted."
  exit
fi

GRUNT_VERSION=`grunt --version`
if [[ ! $GRUNT_VERSION =~ ^grunt-cli.* ]]; then
  echo "Grunt version detected is invalid: '$GRUNT_VERSION'."
  echo "Please install grunt using 'sudo npm install -g grunt grunt-cli'"
  exit
fi

if [[ $LINUX != 1 ]]; then
    USER=`whoami`
fi

# ugh, this giant block of code simply parses an input option and
# ensures the specified path exists
if [ $# -eq "$NO_ARGS" ]
then
  echo "usage: `basename $0` -p <prefix> [-u <user> default=autom8]"
  exit 128
fi

while getopts "p:u:" OPTION
do
  case $OPTION in
    p) PREFIX=$OPTARG;;
    u) USER=$OPTARG;;
  esac
done

if [ -z $PREFIX ]
then
    echo "[ERROR] no installation directory specified. use -p <prefix>"
    exit
fi

# linux users get their own user, and later, an init script
if [[ $LINUX == 1 ]]; then
  USER_EXISTS=$(cat /etc/passwd | grep $USER | sed -e 's/:.*//g')
  if [ -z $USER_EXISTS ]
  then
    echo "[*] adding user $USER"
    useradd --create-home $USER
  fi
fi

# copy to target directory
echo "[*] copying stage... to $PREFIX/$STAGE"
mkdir -p $PREFIX
cp -rfp stage $PREFIX/$STAGE
cd $PREFIX

# substitute {{PREFIX}}, {{USER}}
echo "[*] replacing {{PREFIX}} with $PREFIX"
pushd $PREFIX/$STAGE
ESCAPED_PREFIX=$(echo $PREFIX | sed 's_/_\\/_g') # cwd, with escaped slashes
find ./bin -type f -print0 | xargs -0 perl -p -i".delme" -e "s/{{PREFIX}}/$ESCAPED_PREFIX/g"
find ./share -type f -print0 | xargs -0 perl -p -i".delme" -e "s/{{PREFIX}}/$ESCAPED_PREFIX/g"
find ./lib/autom8/client -type f -print0 | xargs -0 perl -p -i".delme" -e "s/{{PREFIX}}/$ESCAPED_PREFIX/g"
find ./lib/autom8/server -type f -print0 | xargs -0 perl -p -i".delme" -e "s/{{PREFIX}}/$ESCAPED_PREFIX/g"
find ./lib/autom8/shared -type f -print0 | xargs -0 perl -p -i".delme" -e "s/{{PREFIX}}/$ESCAPED_PREFIX/g"
find ./bin -type f -print0 | xargs -0 perl -p -i".delme" -e "s/{{USER}}/$USER/g"
find . -name "*.delme" -type f -print0 | xargs -0 rm
popd

# install node modules
echo "[*] installing node modules"
pushd ./$STAGE/lib/autom8 > /dev/null
sudo npm install
popd > /dev/null

# chmod/chown files
echo "[*] setting permissions"
sudo chown -R $USER $STAGE/*
sudo chmod -R g-w $STAGE/*
sudo chmod -R o-w $STAGE/*

# done!!
echo "[*] finalizing"
mkdir -p bin
mkdir -p lib
mkdir -p share
cp -Rfp $STAGE/bin/* bin/
cp -Rfp $STAGE/lib/* lib/
cp -Rfp $STAGE/share/* share/
rm -rf $STAGE

# install init script
if [[ $LINUX == 1 ]]; then
  echo "[*] installing init script"
  sudo rm /etc/init.d/autom8
  sudo rm /etc/init.d/autom8-server
  sudo cp $PREFIX/bin/autom8-init.rc /etc/init.d/autom8-server
  sudo chmod +x /etc/init.d/autom8-server
fi

echo "[*] done"
